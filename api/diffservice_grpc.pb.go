// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/diffservice.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeltaDiffService_CalculateDeltaDiffs_FullMethodName = "/deltadiff.DeltaDiffService/CalculateDeltaDiffs"
	DeltaDiffService_GetManifest_FullMethodName         = "/deltadiff.DeltaDiffService/GetManifest"
)

// DeltaDiffServiceClient is the client API for DeltaDiffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeltaDiffServiceClient interface {
	CalculateDeltaDiffs(ctx context.Context, in *CalcImageDiffsRequest, opts ...grpc.CallOption) (DeltaDiffService_CalculateDeltaDiffsClient, error)
	GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
}

type deltaDiffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeltaDiffServiceClient(cc grpc.ClientConnInterface) DeltaDiffServiceClient {
	return &deltaDiffServiceClient{cc}
}

func (c *deltaDiffServiceClient) CalculateDeltaDiffs(ctx context.Context, in *CalcImageDiffsRequest, opts ...grpc.CallOption) (DeltaDiffService_CalculateDeltaDiffsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeltaDiffService_ServiceDesc.Streams[0], DeltaDiffService_CalculateDeltaDiffs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deltaDiffServiceCalculateDeltaDiffsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeltaDiffService_CalculateDeltaDiffsClient interface {
	Recv() (*CalculateDeltaDiffsResponse, error)
	grpc.ClientStream
}

type deltaDiffServiceCalculateDeltaDiffsClient struct {
	grpc.ClientStream
}

func (x *deltaDiffServiceCalculateDeltaDiffsClient) Recv() (*CalculateDeltaDiffsResponse, error) {
	m := new(CalculateDeltaDiffsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deltaDiffServiceClient) GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, DeltaDiffService_GetManifest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeltaDiffServiceServer is the server API for DeltaDiffService service.
// All implementations must embed UnimplementedDeltaDiffServiceServer
// for forward compatibility
type DeltaDiffServiceServer interface {
	CalculateDeltaDiffs(*CalcImageDiffsRequest, DeltaDiffService_CalculateDeltaDiffsServer) error
	GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	mustEmbedUnimplementedDeltaDiffServiceServer()
}

// UnimplementedDeltaDiffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeltaDiffServiceServer struct {
}

func (UnimplementedDeltaDiffServiceServer) CalculateDeltaDiffs(*CalcImageDiffsRequest, DeltaDiffService_CalculateDeltaDiffsServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateDeltaDiffs not implemented")
}
func (UnimplementedDeltaDiffServiceServer) GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedDeltaDiffServiceServer) mustEmbedUnimplementedDeltaDiffServiceServer() {}

// UnsafeDeltaDiffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeltaDiffServiceServer will
// result in compilation errors.
type UnsafeDeltaDiffServiceServer interface {
	mustEmbedUnimplementedDeltaDiffServiceServer()
}

func RegisterDeltaDiffServiceServer(s grpc.ServiceRegistrar, srv DeltaDiffServiceServer) {
	s.RegisterService(&DeltaDiffService_ServiceDesc, srv)
}

func _DeltaDiffService_CalculateDeltaDiffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalcImageDiffsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeltaDiffServiceServer).CalculateDeltaDiffs(m, &deltaDiffServiceCalculateDeltaDiffsServer{stream})
}

type DeltaDiffService_CalculateDeltaDiffsServer interface {
	Send(*CalculateDeltaDiffsResponse) error
	grpc.ServerStream
}

type deltaDiffServiceCalculateDeltaDiffsServer struct {
	grpc.ServerStream
}

func (x *deltaDiffServiceCalculateDeltaDiffsServer) Send(m *CalculateDeltaDiffsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeltaDiffService_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeltaDiffServiceServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeltaDiffService_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeltaDiffServiceServer).GetManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeltaDiffService_ServiceDesc is the grpc.ServiceDesc for DeltaDiffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeltaDiffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deltadiff.DeltaDiffService",
	HandlerType: (*DeltaDiffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _DeltaDiffService_GetManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateDeltaDiffs",
			Handler:       _DeltaDiffService_CalculateDeltaDiffs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/diffservice.proto",
}
